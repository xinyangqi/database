
CREATE TABLE USERS (
    USER_ID NUMBER NOT NULL,
    FIRST_NAME VARCHAR2(100) NOT NULL,
    LAST_NAME VARCHAR2(100) NOT NULL,
    YEAR_OF_BIRTH INTEGER,
    MONTH_OF_BIRTH INTEGER,
    DAY_OF_BIRTH INTEGER,
    GENDER VARCHAR2(100),
    PRIMARY KEY(USER_ID)
    );

CREATE TABLE FRIENDS
     ( USER1_ID NUMBER,
       USER2_ID NUMBER,
       PRIMARY KEY (USER1_ID, USER2_ID),
       FOREIGN KEY (USER2_ID) REFERENCES USERS,
       FOREIGN KEY (USER1_ID) REFERENCES USERS
    	) ;

CREATE TABLE CITIES (
    CITY_ID INTEGER NOT NULL,
    CITY_NAME VARCHAR2(100) NOT NULL,
    STATE_NAME VARCHAR2(100) NOT NULL,
    COUNTRY_NAME VARCHAR2(100) NOT NULL,
    PRIMARY KEY (CITY_ID),
    UNIQUE (CITY_NAME,STATE_NAME,COUNTRY_NAME)
    );

CREATE TABLE USER_CURRENT_CITIES
     (  USER_ID NUMBER NOT NULL,
        CURRENT_CITY_ID INTEGER NOT NULL, -- CAN BE NULL
        PRIMARY KEY (USER_ID),
        FOREIGN KEY (USER_ID) REFERENCES USERS,
        FOREIGN KEY (CURRENT_CITY_ID) REFERENCES CITIES
        );

CREATE TABLE USER_HOMETOWN_CITIES(
    USER_ID NUMBER NOT NULL,
    HOMETOWN_CITY_ID INTEGER NOT NULL,
    PRIMARY KEY (USER_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS,
    FOREIGN KEY (HOMETOWN_CITY_ID) REFERENCES CITIES
    );

CREATE TABLE PROGRAMS (
    PROGRAM_ID INTEGER NOT NULL,
    INSTITUTION VARCHAR2(100) NOT NULL,
    CONCENTRATION VARCHAR2(100) NOT NULL,
    DEGREE VARCHAR2(100) NOT NULL,
    PRIMARY KEY(PROGRAM_ID),
    UNIQUE (INSTITUTION,CONCENTRATION,DEGREE)
    );

 CREATE TABLE MESSAGES
     (  MESSAGE_ID NUMBER NOT NULL,--NEED TRIGER HERE
     	SENDER_ID NUMBER NOT NULL, 
     	RECEIVER_ID NUMBER NOT NULL,
        MESSAGE_CONTENT VARCHAR2(2000) NOT NULL,
        SENT_TIME TIMESTAMP NOT NULL,
        PRIMARY KEY (MESSAGE_ID),
        FOREIGN KEY (SENDER_ID) REFERENCES USERS,
        FOREIGN KEY (RECEIVER_ID) REFERENCES USERS
     	) ;

CREATE TABLE USER_EVENTS (
    EVENT_ID NUMBER NOT NULL,
    EVENT_CREATOR_ID NUMBER NOT NULL,
    EVENT_NAME VARCHAR2(100) NOT NULL,
    EVENT_TAGLINE VARCHAR2(100),
    EVENT_DESCRIPTION VARCHAR2(100),
    EVENT_HOST VARCHAR2(100),
    EVENT_TYPE VARCHAR2(100),
    EVENT_SUBTYPE VARCHAR2(100),
    EVENT_ADDRESS VARCHAR2(100),
    EVENT_CITY_ID INTEGER NOT NULL,
    EVENT_START_TIME TIMESTAMP,
    EVENT_END_TIME TIMESTAMP,
    PRIMARY KEY(EVENT_ID),
    FOREIGN KEY(EVENT_CREATOR_ID)
    REFERENCES USERS(USER_ID),
    FOREIGN KEY(EVENT_CITY_ID)
    REFERENCES CITIES(CITY_ID)
    );

CREATE TABLE EDUCATION 
    ( USER_ID NUMBER,
      PROGRAM_ID INTEGER, 
      PROGRAM_YEAR INTEGER NOT NULL, 
      PRIMARY KEY (USER_ID,PROGRAM_ID),
      FOREIGN KEY (USER_ID) REFERENCES USERS,
      FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAMS
    );

CREATE TABLE PARTICIPANTS
     ( EVENT_ID NUMBER,
       USER_ID NUMBER,
       CONFIRMATION VARCHAR2(100) NOT NULL,
       PRIMARY KEY (EVENT_ID, USER_ID),
       FOREIGN KEY (EVENT_ID) REFERENCES USER_EVENTS,
       FOREIGN KEY (USER_ID) REFERENCES USERS,
       CHECK (CONFIRMATION IN ('ATTENDING', 'UNSURE', 'DECLINES', 'NOT_REPLIED'))
       );

CREATE TABLE PHOTOS
     ( PHOTO_ID NUMBER, 
            ALBUM_ID NUMBER NOT NULL,
            PHOTO_CAPTION VARCHAR2(2000),
            PHOTO_CREATED_TIME TIMESTAMP NOT NULL,
            PHOTO_MODIFIED_TIME TIMESTAMP,
            PHOTO_LINK VARCHAR2(2000) NOT NULL,
            PRIMARY KEY (PHOTO_ID) -- insert photo first 
            );

CREATE TABLE ALBUMS
     ( ALBUM_ID NUMBER NOT NULL, 
       ALBUM_OWNER_ID NUMBER NOT NULL,
       ALBUM_NAME VARCHAR2(100) NOT NULL,
       ALBUM_CREATED_TIME TIMESTAMP NOT NULL,
       ALBUM_MODIFIED_TIME TIMESTAMP,
       ALBUM_LINK VARCHAR2(100) NOT NULL,
       ALBUM_VISIBILITY VARCHAR2(100) NOT NULL, --NEED TO CHECK
       COVER_PHOTO_ID NUMBER NOT NULL, 
       PRIMARY KEY (ALBUM_ID),
       FOREIGN KEY (ALBUM_OWNER_ID) REFERENCES USERS,
       CHECK (ALBUM_VISIBILITY IN ('EVERYONE','FRIENDS','FRIENDS_OF_FRIENDS','MYSELF'))
       );

CREATE TABLE TAGS (
    TAG_PHOTO_ID NUMBER NOT NULL,
    TAG_SUBJECT_ID NUMBER NOT NULL,
    TAG_CREATED_TIME TIMESTAMP NOT NULL,
    TAG_X NUMBER NOT NULL,
    TAG_Y NUMBER NOT NULL,
    PRIMARY KEY (TAG_PHOTO_ID,TAG_SUBJECT_ID),
    FOREIGN KEY (TAG_PHOTO_ID)
    REFERENCES PHOTOS(PHOTO_ID),
    FOREIGN KEY (TAG_SUBJECT_ID)
    REFERENCES USERS(USER_ID)
    );



    -- CREATE SEQUENCE PHOTOS_SEQUENCE
     --START WITH 1
     --INCREMENT BY 1;

     --CREATE TRIGGER PHOTOS_INDEX
       --  BEFORE INSERT ON PHOTOS
         --FOR EACH ROW
         --BEGIN
           --  SELECT PHOTOS_SEQUENCE.NEXTVAL INTO : NEW.PHOTO_ID FROM DUAL;
         --END;
     --/

ALTER TABLE PHOTOS -- INSERT PHOTOS FIRST AND THEN ALBUMS, THEN COMMIT
    ADD CONSTRAINT PHOTOS_FK
    FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS
    INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE ALBUMS
    ADD CONSTRAINT ALBUMS_FK
    FOREIGN KEY (COVER_PHOTO_ID) REFERENCES PHOTOS
    INITIALLY DEFERRED DEFERRABLE;
       
    -- CREATE SEQUENCE ALBUMS_SEQUENCE
     --START WITH 1
     --INCREMENT BY 1;

     --CREATE TRIGGER ALBUMS_INDEX
       --  BEFORE INSERT ON ALBUMS
         --FOR EACH ROW
         --BEGIN
           --  SELECT ALBUMS_SEQUENCE.NEXTVAL INTO : NEW.ALBUM_ID FROM DUAL;
         --END;
     --/

CREATE SEQUENCE CITY_ID_SEQUENCE
START WITH 1
INCREMENT BY 1;

CREATE TRIGGER TRIGGER_CITY
    BEFORE INSERT ON CITIES
    FOR EACH ROW
    BEGIN
        SELECT CITY_ID_SEQUENCE.NEXTVAL INTO :NEW.CITY_ID FROM DUAL;
    END;
/

CREATE SEQUENCE PROGRAM_ID_SEQUENCE
START WITH 1
INCREMENT BY 1;

CREATE TRIGGER TRIGGER_PROGRAM
    BEFORE INSERT ON PROGRAMS
    FOR EACH ROW
    BEGIN
        SELECT PROGRAM_ID_SEQUENCE.NEXTVAL INTO :NEW.PROGRAM_ID FROM DUAL;
    END;
/

CREATE TRIGGER order_friends_pairs 
    BEFORE INSERT ON FRIENDS
    FOR EACH ROW
            DECLARE temp NUMBER;
            BEGIN
                IF :NEW.USER1_ID > :NEW.USER2_ID THEN
                    temp := :NEW.USER2_ID; 
                    :NEW.USER2_ID := :NEW.USER1_ID; 
                    :NEW.USER1_ID := temp;
                END IF;
            END;

/


