
SET AUTOCOMMIT OFF;

INSERT INTO USERS(USER_ID,FIRST_NAME,LAST_NAME,YEAR_OF_BIRTH,
                  MONTH_OF_BIRTH,DAY_OF_BIRTH,GENDER)
    SELECT DISTINCT USER_ID,FIRST_NAME,LAST_NAME,YEAR_OF_BIRTH,
                    MONTH_OF_BIRTH,DAY_OF_BIRTH,GENDER
    FROM jsoren.PUBLIC_USER_INFORMATION;

-- INSERT VALUES FOR FRIENDS
INSERT INTO FRIENDS (USER1_ID,USER2_ID)
SELECT DISTINCT USER1_ID,USER2_ID
FROM jsoren.PUBLIC_ARE_FRIENDS;

-- INSERT VALUES FOR CITIES
INSERT INTO CITIES (CITY_NAME, STATE_NAME, COUNTRY_NAME) --WILL THIS SELECT NULL? THERE IS A TRIGGER AS WELL
SELECT DISTINCT CURRENT_CITY, CURRENT_STATE, CURRENT_COUNTRY
FROM jsoren.PUBLIC_USER_INFORMATION
WHERE CURRENT_CITY IS NOT NULL
UNION
SELECT DISTINCT HOMETOWN_CITY, HOMETOWN_STATE, HOMETOWN_COUNTRY
FROM jsoren.PUBLIC_USER_INFORMATION
WHERE HOMETOWN_CITY IS NOT NULL;

-- INSERT VALUES FOR USER_CURRENT_CITIES
INSERT INTO USER_CURRENT_CITIES (USER_ID, CURRENT_CITY_ID)
SELECT DISTINCT USER_ID, CITY_ID
FROM jsoren.PUBLIC_USER_INFORMATION J
JOIN CITIES
ON J.CURRENT_CITY=CITIES.CITY_NAME AND J.CURRENT_STATE=CITIES.STATE_NAME AND J.CURRENT_COUNTRY=CITIES.COUNTRY_NAME;

-- INSERT VALUES FOR USER_HOMETOWN_CITIES
INSERT INTO USER_HOMETOWN_CITIES (USER_ID, HOMETOWN_CITY_ID)
SELECT DISTINCT USER_ID, CITY_ID
FROM jsoren.PUBLIC_USER_INFORMATION J
JOIN CITIES
ON J.HOMETOWN_CITY=CITIES.CITY_NAME AND J.HOMETOWN_STATE=CITIES.STATE_NAME AND J.HOMETOWN_COUNTRY=CITIES.COUNTRY_NAME;

-- INSERT VALUE FOR MESSAGES
-- INSERT VALUE FOR PROGRAMS
INSERT INTO PROGRAMS (INSTITUTION, CONCENTRATION, DEGREE)
SELECT DISTINCT INSTITUTION_NAME, PROGRAM_CONCENTRATION, PROGRAM_DEGREE
FROM jsoren.PUBLIC_USER_INFORMATION 
WHERE INSTITUTION_NAME IS NOT NULL;

-- INSERT VALUE FOR EDUCATION -- NULL VALUES...
INSERT INTO EDUCATION (USER_ID, PROGRAM_ID, PROGRAM_YEAR)
SELECT USER_ID, PROGRAM_ID, PROGRAM_YEAR --WILL THIS SELECT NULL?
FROM jsoren.PUBLIC_USER_INFORMATION J
JOIN PROGRAMS
ON J.INSTITUTION_NAME=PROGRAMS.INSTITUTION AND J.PROGRAM_CONCENTRATION=PROGRAMS.CONCENTRATION AND J.PROGRAM_DEGREE=PROGRAMS.DEGREE;

-- INSERT VALUE FOR USER_EVENTS
INSERT INTO USER_EVENTS (EVENT_ID, EVENT_CREATOR_ID, EVENT_NAME, EVENT_TAGLINE, EVENT_DESCRIPTION, EVENT_HOST, EVENT_TYPE, EVENT_SUBTYPE, EVENT_ADDRESS, EVENT_CITY_ID, EVENT_START_TIME, EVENT_END_TIME)
SELECT EVENT_ID, EVENT_CREATOR_ID, EVENT_NAME, EVENT_TAGLINE, EVENT_DESCRIPTION, EVENT_HOST, EVENT_TYPE, EVENT_SUBTYPE, EVENT_ADDRESS, CITY_ID, EVENT_START_TIME, EVENT_END_TIME
FROM jsoren.PUBLIC_EVENT_INFORMATION J
JOIN CITIES
ON J.EVENT_CITY=CITIES.CITY_NAME AND J.EVENT_STATE=CITIES.STATE_NAME AND J.EVENT_COUNTRY=CITIES.COUNTRY_NAME;

-- INSERT VALUE FOR PARTICIPANTS

-- INSERT VALUE FOR PHOTOS
INSERT INTO PHOTOS (PHOTO_ID,ALBUM_ID, PHOTO_CAPTION, PHOTO_CREATED_TIME, PHOTO_MODIFIED_TIME, PHOTO_LINK)
SELECT DISTINCT PHOTO_ID, ALBUM_ID, PHOTO_CAPTION, PHOTO_CREATED_TIME, PHOTO_MODIFIED_TIME,PHOTO_LINK
FROM jsoren.PUBLIC_PHOTO_INFORMATION;

-- INSERT VALUE FOR ALBUMS
INSERT INTO ALBUMS (ALBUM_ID, ALBUM_OWNER_ID, ALBUM_NAME, ALBUM_CREATED_TIME, ALBUM_MODIFIED_TIME, ALBUM_LINK, ALBUM_VISIBILITY, COVER_PHOTO_ID)
SELECT DISTINCT ALBUM_ID, OWNER_ID, ALBUM_NAME, ALBUM_CREATED_TIME, ALBUM_MODIFIED_TIME, ALBUM_LINK, ALBUM_VISIBILITY, COVER_PHOTO_ID
FROM jsoren.PUBLIC_PHOTO_INFORMATION;

-- INSERT VALUE FOR TAGS
INSERT INTO TAGS (TAG_PHOTO_ID, TAG_SUBJECT_ID, TAG_CREATED_TIME, TAG_X, TAG_Y)
SELECT DISTINCT PHOTO_ID, TAG_SUBJECT_ID, TAG_CREATED_TIME, TAG_X_COORDINATE, TAG_Y_COORDINATE
FROM jsoren.PUBLIC_TAG_INFORMATION;















